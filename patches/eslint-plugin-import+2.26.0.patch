diff --git a/node_modules/eslint-plugin-import/config/recommended-esm.js b/node_modules/eslint-plugin-import/config/recommended-esm.js
new file mode 100644
index 0000000..0b78a13
--- /dev/null
+++ b/node_modules/eslint-plugin-import/config/recommended-esm.js
@@ -0,0 +1,20 @@
+const recommendedConfig = require('./recommended')
+
+/**
+ * The basics.
+ * @type {Object}
+ */
+module.exports = {
+  ...recommendedConfig,
+  rules: {
+    ...recommendedConfig.rules,
+    'import/esm-extensions': 'error',
+  },
+
+  // need all these for parsing dependencies (even if _your_ code doesn't need
+  // all of them)
+  parserOptions: {
+    ...recommendedConfig.parserOptions,
+    ecmaVersion: 2020,
+  },
+};
diff --git a/node_modules/eslint-plugin-import/lib/index.js b/node_modules/eslint-plugin-import/lib/index.js
index 247818e..21a8f63 100644
--- a/node_modules/eslint-plugin-import/lib/index.js
+++ b/node_modules/eslint-plugin-import/lib/index.js
@@ -41,6 +41,7 @@
   'no-useless-path-segments': require('./rules/no-useless-path-segments'),
   'dynamic-import-chunkname': require('./rules/dynamic-import-chunkname'),
   'no-import-module-exports': require('./rules/no-import-module-exports'),
+  'esm-extensions': require('./rules/esm-extensions'),
 
   // export
   'exports-last': require('./rules/exports-last'),
@@ -54,6 +55,7 @@
 
 var configs = exports.configs = {
   'recommended': require('../config/recommended'),
+  'recommended-esm': require('../config/recommended-esm'),
 
   'errors': require('../config/errors'),
   'warnings': require('../config/warnings'),
diff --git a/node_modules/eslint-plugin-import/lib/rules/esm-extensions.js b/node_modules/eslint-plugin-import/lib/rules/esm-extensions.js
new file mode 100644
index 0000000..31e9d44
--- /dev/null
+++ b/node_modules/eslint-plugin-import/lib/rules/esm-extensions.js
@@ -0,0 +1,74 @@
+'use strict'
+
+
+
+
+var _resolve = require('eslint-module-utils/resolve');
+var _resolve2 = _interopRequireDefault(_resolve)
+var _ModuleCache = require('eslint-module-utils/ModuleCache');
+var _ModuleCache2 = _interopRequireDefault(_ModuleCache)
+var _moduleVisitor = require('eslint-module-utils/moduleVisitor');
+var _moduleVisitor2 = _interopRequireDefault(_moduleVisitor)
+var _docsUrl = require('../docsUrl');
+var _docsUrl2 = _interopRequireDefault(_docsUrl);
+function _interopRequireDefault(obj) {
+  return obj && obj.__esModule ? obj : { 'default': obj }
+}
+/**
+* @fileOverview Ensures that an imported path exists, given resolution rules.
+* @author Ben Mosher
+*/module.exports = {
+  meta: {
+    type: 'problem',
+    docs: {
+      url: (0, _docsUrl2['default'])('no-unresolved')
+    },
+
+
+    schema: [
+      (0, _moduleVisitor.makeOptionsSchema)({
+        caseSensitive: { type: 'boolean', 'default': true },
+        caseSensitiveStrict: { type: 'boolean', 'default': false }
+      })]
+  },
+
+
+
+
+  create: function (context) {
+      var options = context.options[0] || {}
+
+
+      function checkSourceValue(source, node) {
+        context.report(
+            source, 'TEST ERROR MESSAGE \'' + String(
+              source.value) + '\'.')
+        // ignore type-only imports
+        if (node.importKind === 'type') {
+          return
+        }
+
+        var caseSensitive = !_resolve.CASE_SENSITIVE_FS && options.caseSensitive !== false
+        var caseSensitiveStrict = !_resolve.CASE_SENSITIVE_FS && options.caseSensitiveStrict
+
+        var resolvedPath = (0, _resolve2['default'])(source.value, context)
+
+        if (resolvedPath === undefined) {
+          context.report(
+            source, 'Unable to resolve path to module \'' + String(
+              source.value) + '\'.')
+
+        } else if (caseSensitive || caseSensitiveStrict) {
+          var cacheSettings = _ModuleCache2['default'].getSettings(context.settings)
+          if (!(0, _resolve.fileExistsWithCaseSync)(resolvedPath, cacheSettings, caseSensitiveStrict)) {
+            context.report(
+              source, 'Casing of ' + String(
+                source.value) + ' does not match the underlying filesystem.')
+
+          }
+        }
+      }
+
+      return (0, _moduleVisitor2['default'])(checkSourceValue, options)
+    }
+}
